generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  name         String
  email        String      @unique
  phoneNumber  String
  status       Status      @default(ACTIVE)
  notes        String?
  role         Role        @default(AGENT)
  passwordHash String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  apartments   Apartment[] @relation("UserApartments")
  clients      Client[]
  createdTasks Task[]      @relation("UserCreatedTasks")
}

model Client {
  id                   Int          @id @default(autoincrement())
  name                 String
  email                String       @unique
  phoneNumber          String
  notes                String?
  provenance           String
  status               ClientStatus @default(LEAD)
  createdById          Int
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  apartments           Apartment[]
  createdBy            User         @relation(fields: [createdById], references: [id])
  interestedApartments Apartment[]  @relation("InterestedApartments")
}

model Project {
  id                 Int           @id @default(autoincrement())
  name               String
  image              String?
  address            String
  totalSurface       Int
  numberOfApartments Int
  notes              String?

  // Enhanced fields for frontend compatibility
  latitude           Float?
  longitude          Float?
  folderFees         Float?
  commissionPerM2    Float?
  totalSales         Float?
  status             ProjectStatus @default(PLANIFICATION)
  progress           Int           @default(0)
  constructionPhotos String[]      @default([])

  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  apartments         Apartment[]
}

model Apartment {
  id                Int             @id @default(autoincrement())
  number            String
  floor             Int?
  type              PropertyType    @default(APARTMENT)
  area              Float?
  threeDViewUrl     String?
  price             Float           // This maps to prixTotal in frontend
  pricePerM2        Float?          // This maps to prixM2 in frontend
  zone              String?
  image             String?
  status            ApartmentStatus @default(AVAILABLE)
  notes             String?

  // Enhanced fields for better frontend compatibility
  prixType          PriceType?      @default(FIXE)

  projectId         Int
  clientId          Int?
  userId            Int?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  client            Client?         @relation(fields: [clientId], references: [id])
  project           Project         @relation(fields: [projectId], references: [id])
  user              User?           @relation("UserApartments", fields: [userId], references: [id])
  interestedClients Client[]        @relation("InterestedApartments")
}

model Task {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  dueDate     DateTime
  status      TodoStatus @default(TODO)
  createdById Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  comments    Comment[]
  createdBy   User?      @relation("UserCreatedTasks", fields: [createdById], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  taskId    Int
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id])
}

model monthlyTarget {
  id        Int      @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  target    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  AGENT
}

enum PropertyType {
  APARTMENT
  DUPLEX
  VILLA
  PENTHOUSE
  STUDIO
  LOFT
  TOWNHOUSE
  STORE
  OFFICE
  WAREHOUSE
  LAND
  GARAGE
  PARKING
}

enum PriceType {
  FIXE
  M2
}

enum ProjectStatus {
  PLANIFICATION
  CONSTRUCTION
  DONE
}

enum ApartmentStatus {
  AVAILABLE
  RESERVED
  SOLD
}

enum ClientStatus {
  LEAD
  CLIENT
}

enum Status {
  ACTIVE
  INACTIVE
}

enum TodoStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}
